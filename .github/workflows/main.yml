name: CI Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  # Unit Tests
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install root dependencies (for nyc)
      - name: Install nyc at root
        run: npm install nyc --no-save

      # Frontend Unit Tests
      - name: Install dependencies for frontend
        run: npm ci
        working-directory: ./frontend

      - name: Run frontend unit tests and collect coverage
        run: npm run test:ci:unit
        working-directory: ./frontend

      # Backend Unit Tests
      - name: Install dependencies for backend
        run: npm ci
        working-directory: ./backend

      - name: Run backend unit tests and collect coverage
        run: npm run test:ci:unit
        working-directory: ./backend

      # Copy coverage data to .nyc_output
      - name: Copy coverage data to .nyc_output
        run: |
          mkdir -p .nyc_output
          cp frontend/coverage/coverage-final.json .nyc_output/frontend.json
          cp backend/coverage/coverage-final.json .nyc_output/backend.json

      # Merge coverage reports
      - name: Merge unit test coverage reports
        run: npx nyc merge .nyc_output coverage/coverage-unit.json

      # Generate combined coverage report
      - name: Generate merged unit test coverage report
        run: npx nyc report --reporter=html --report-dir=coverage/unit --temp-dir=.nyc_output

      # Upload coverage report
      - name: Upload unit test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-report
          path: coverage/unit

  # Integration Tests
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.7
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install nyc at root
      - name: Install nyc at root
        run: npm install nyc --no-save

      # Frontend Integration Tests
      - name: Install dependencies for frontend
        run: npm ci
        working-directory: ./frontend

      - name: Run frontend integration tests and collect coverage
        run: npm run test:ci:integration
        working-directory: ./frontend

      # Backend Integration Tests
      - name: Install dependencies for backend
        run: npm ci
        working-directory: ./backend

      - name: Run backend integration tests and collect coverage
        run: npm run test:ci:integration
        working-directory: ./backend

      # Copy coverage data to .nyc_output
      - name: Copy coverage data to .nyc_output
        run: |
          mkdir -p .nyc_output
          cp frontend/coverage/coverage-final.json .nyc_output/frontend.json
          cp backend/coverage/coverage-final.json .nyc_output/backend.json

      # Merge coverage reports
      - name: Merge integration test coverage reports
        run: npx nyc merge .nyc_output coverage/coverage-integration.json

      # Generate combined coverage report
      - name: Generate merged integration test coverage report
        run: npx nyc report --reporter=html --report-dir=coverage/integration --temp-dir=.nyc_output

      # Upload coverage report
      - name: Upload integration test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: coverage/integration

  # Deploy Test Reports to GitHub Pages
  deploy-reports:
    name: Deploy Test Reports
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Create directories for reports
      - name: Create directories for reports
        run: |
          mkdir -p reports/unit
          mkdir -p reports/integration

      # Download artifacts
      - name: Download unit test coverage report
        uses: actions/download-artifact@v3
        with:
          name: unit-test-report
          path: reports/unit

      - name: Download integration test coverage report
        uses: actions/download-artifact@v3
        with:
          name: integration-test-report
          path: reports/integration

      # Create index.html for navigation
      - name: Create index.html
        run: |
          echo '<html><body><h1>Test Coverage Reports</h1><ul><li><a href="reports/unit/index.html">Unit Test Coverage Report</a></li><li><a href="reports/integration/index.html">Integration Test Coverage Report</a></li></ul></body></html>' > index.html

      # Commit and push changes
      - name: Commit and push changes
        run: |
          git add reports/* index.html
          git commit -m "Update test reports [skip ci]" || echo "No changes to commit"
          git push origin gh-pages
