name: CI Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  # Unit Tests
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Frontend Unit Tests
      - name: Install dependencies for frontend
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend unit tests and collect coverage
        working-directory: ./frontend
        run: npm run test:ci:unit

      # Save frontend unit test report
      - name: Upload frontend unit test report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-unit-test-report
          path: ./frontend/coverage/lcov-report/**

      # Backend Unit Tests
      - name: Install dependencies for backend
        working-directory: ./backend
        run: npm ci

      - name: Run backend unit tests and collect coverage
        working-directory: ./backend
        run: npm run test:ci:unit

      # Save backend unit test report
      - name: Upload backend unit test report
        uses: actions/upload-artifact@v3
        with:
          name: backend-unit-test-report
          path: ./backend/coverage/lcov-report/**

  # Integration Tests
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      docker:
        image: docker:20.10.7
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Frontend Integration Tests
      - name: Install dependencies for frontend
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend integration tests and collect coverage
        working-directory: ./frontend
        run: npm run test:ci:integration -- --passWithNoTests

      # Save frontend integration test report
      - name: Upload frontend integration test report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-integration-test-report
          path: ./frontend/coverage/lcov-report/**

      # Backend Integration Tests
      - name: Install dependencies for backend
        working-directory: ./backend
        run: npm ci

      - name: Run backend integration tests and collect coverage
        working-directory: ./backend
        run: npm run test:ci:integration

      # Save backend integration test report
      - name: Upload backend integration test report
        uses: actions/upload-artifact@v3
        with:
          name: backend-integration-test-report
          path: ./backend/coverage/lcov-report/**

  # E2E Tests
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      # Build frontend (if required)
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # Start frontend server
      - name: Start frontend server
        working-directory: ./frontend
        #env:
          # In case needed: add env variables here, useless for now
        run: |
          npm start &
          echo $! > frontend.pid

      # Wait for frontend server to be up
      - name: Wait for frontend server to be up
        run: |
          echo "Waiting for frontend to be up..."
          for i in {1..10}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Frontend is up"
              break
            fi
            echo "Waiting..."
            sleep 5
          done

      # Install Playwright Browsers
      - name: Install Playwright Browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      # Run Playwright tests and generate HTML report
      - name: Run Playwright tests and generate HTML report
        working-directory: ./frontend
        run: npx playwright test --reporter=html

      # Upload Playwright report as artifact
      - name: Upload Playwright report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: ./frontend/playwright-report/

      # Stop frontend server
      - name: Stop frontend server
        working-directory: ./frontend
        run: kill $(cat frontend.pid)



  # Deploy Test Reports and JSDoc to GitHub Pages
  deploy-reports:
    name: Deploy Test Reports and JSDoc
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code and gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          fetch-depth: 0
          clean: false

      - name: Checkout develop branch to fetch docs
        run: git checkout develop

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install all dependencies (including JSDoc)
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      # Install missing JSDoc and templates/plugins globally if required
      - name: Install JSDoc and necessary templates
        working-directory: ./backend
        run: |
          npm install jsdoc
          npm install minami
          npm install jsdoc-express-with-swagger

      - name: Install JSDoc and necessary templates
        working-directory: ./frontend
        run: |
          npm install jsdoc
          npm install minami
          npm install jsdoc-express-with-swagger

      # Generate Backend Documentation
      - name: Generate Backend Documentation
        working-directory: ./backend
        run: npm run generate-docs

      # Generate Frontend Documentation
      - name: Generate Frontend Documentation
        working-directory: ./frontend
        run: npm run generate-docs

      # Download Playwright report
      - name: Download Playwright report
        uses: actions/download-artifact@v3
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/

      - name: Download frontend unit test report
        uses: actions/download-artifact@v3
        with:
          name: frontend-unit-test-report
          path: unit-tests/frontend

      - name: Download backend unit test report
        uses: actions/download-artifact@v3
        with:
          name: backend-unit-test-report
          path: unit-tests/backend

      - name: Download frontend integration test report
        uses: actions/download-artifact@v3
        with:
          name: frontend-integration-test-report
          path: integration-tests/frontend

      - name: Download backend integration test report
        uses: actions/download-artifact@v3
        with:
          name: backend-integration-test-report
          path: integration-tests/backend

      # Organize Test Reports and Documentation
      - name: Organize Test Reports and Documentation
        run: |
          # Remove existing reports and docs directories if they exist
          rm -rf reports/frontend/unit-tests
          rm -rf reports/frontend/integration-tests
          rm -rf reports/backend/unit-tests
          rm -rf reports/backend/integration-tests
          rm -rf reports/e2e-tests
          rm -rf docs/api/frontend
          rm -rf docs/api/backend

          # Create fresh directories for reports and docs
          mkdir -p reports/frontend/unit-tests
          mkdir -p reports/frontend/integration-tests
          mkdir -p reports/backend/unit-tests
          mkdir -p reports/backend/integration-tests
          mkdir -p reports/e2e-tests
          mkdir -p docs/api/frontend
          mkdir -p docs/api/backend

          # Move the reports
          mv unit-tests/frontend/* reports/frontend/unit-tests/
          mv integration-tests/frontend/* reports/frontend/integration-tests/
          mv unit-tests/backend/* reports/backend/unit-tests/
          mv integration-tests/backend/* reports/backend/integration-tests/
          mv e2e-tests/playwright-report/* reports/e2e-tests/

          ls -lR docs/

          mv docs/frontend/* docs/frontend/
          mv docs/backend/* docs/backend/

      # Inject Navbar and Custom CSS into Reports (Exclude index.html)
      - name: Inject Navbar and Custom CSS into Reports
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)

          # Inject navbar and custom CSS into all HTML files in reports/
          find reports/ -name '*.html' | while read html_file; do
            # Insert the custom CSS link after the <head> tag
            sed -i "/<head>/a <link rel=\"stylesheet\" href=\"/$REPO_NAME/custom.css\">" "$html_file"

            # Insert the navbar after the <body> tag
            sed -i '/<body>/a <!-- Navbar Start -->' "$html_file"

            # Adjust the navbar links for the reports
            sed "s|href=\"index.html\"|href=\"/$REPO_NAME/index.html\"|g; s|href=\"reports/|href=\"/$REPO_NAME/reports/|g" workflow_templates/navbar.html > temp_navbar.html

            # Inject the adjusted navbar
            sed -i '/<!-- Navbar Start -->/r temp_navbar.html' "$html_file"
            sed -i '/<!-- Navbar Start -->/d' "$html_file"

            # Clean up temporary navbar
            rm temp_navbar.html
          done

      # List reports and docs directories to verify
      - name: List reports and docs directories to verify
        run: ls -lR reports/ docs/

      # Commit and push changes
      - name: Commit and push changes
        if: github.ref == 'refs/heads/develop'
        run: |
          git add .
          git commit -m "Update test reports and JSDoc [skip ci]"
          git push origin gh-pages
